name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g. v1.2.3)"
        required: true

jobs:
  # Build: Linux、Windows、ARMv7
  build-uni:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - i686-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - aarch64-pc-windows-msvc
          - i686-pc-windows-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust & targets
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --version 0.2.1 || true

      - name: Build
        run: cross build --release --target ${{ matrix.target }}

      - name: Package Linux (tar.gz, deb, rpm, AppImage)
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          BIN=target/${{ matrix.target }}/release/${{ github.event.repository.name }}
          mkdir -p dist
          cp "$BIN" dist/
          # tar.gz
          tar czf dist/${{ github.event.repository.name }}-${{ matrix.target }}.tar.gz -C dist ${{ github.event.repository.name }}
          # .deb
          cargo install cargo-deb --version 1.38.0 || true
          cargo deb --no-build --target ${{ matrix.target }} --output dist/${{ github.event.repository.name }}_${{ matrix.target }}.deb
          # .rpm via fpm
          sudo apt-get update && sudo apt-get install -y ruby-dev gcc make rpm
          gem install --no-document fpm
          fpm -s dir -t rpm -n ${{ github.event.repository.name }} -v ${{ github.event.inputs.version }} --architecture ${{ matrix.target }} dist/${{ github.event.repository.name }}=/usr/local/bin
          # AppImage
          curl -LO "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          chmod +x linuxdeploy-x86_64.AppImage
          ./linuxdeploy-x86_64.AppImage --appdir AppDir -d dist/${{ github.event.repository.name }}.desktop -i icon.png \
            --output appimage --executable "$BIN"

      - name: Upload executables and packages
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-assets
          path: |
            target/${{ matrix.target }}/release/${{ github.event.repository.name }}${{ contains(matrix.target, 'windows') && '.exe' || '' }}
            dist/*

  # Build(macOS): DMG + ZIP
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create .app bundle
        run: |
          APP_NAME=${{ github.event.repository.name }}
          APP_DIR="$APP_NAME-${{ matrix.target }}.app"
          mkdir -p "$APP_DIR/Contents/MacOS"
          cp "target/${{ matrix.target }}/release/$APP_NAME" "$APP_DIR/Contents/MacOS/$APP_NAME"

      - name: Make DMG
        run: |
          DMG_NAME=${{ github.event.repository.name }}-${{ matrix.target }}.dmg
          hdiutil create -volname "${{ github.event.repository.name }}" -srcfolder "$APP_NAME-${{ matrix.target }}.app" -ov -format UDZO "$DMG_NAME"

      - name: Make ZIP
        run: |
          ZIP_NAME=${{ github.event.repository.name }}-${{ matrix.target }}.zip
          zip -r "$ZIP_NAME" "${{ github.event.repository.name }}-${{ matrix.target }}.app"

      - name: Upload macOS assets
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-macos
          path: |
            ${{ github.event.repository.name }}-${{ matrix.target }}.dmg
            ${{ github.event.repository.name }}-${{ matrix.target }}.zip

  # Release
  release:
    needs: [build-uni, build-macos]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          files: all-assets/**/*
