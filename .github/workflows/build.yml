name: Build Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            ext: .exe
          - os: windows-i686
            runner: windows-latest
            target: i686-pc-windows-msvc
            ext: .exe
          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            python3
        shell: bash
      - name: Install Python3 on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install python3
        shell: bash

      - name: Build & cache with cross
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.target }}
          args: "--locked --release"
          strip: true

      - name: Get project info
        id: project_info
        run: |
          PROJECT_NAME=$(awk '
            /^\[package\]/ { in_pkg=1; next }
            /^\[/ && in_pkg { exit }
            in_pkg && /^\s*name\s*=/ {
              match($0, /name\s*=\s*"(.*)"/, m)
              print m[1]; exit
            }
          ' Cargo.toml)
          echo "PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_ENV
          echo "Project name: $PROJECT_NAME"
        shell: bash

      - name: Package binary
        run: |
          mkdir -p dist
          BIN="${PROJECT_NAME}${matrix.ext}"
          BINARY_SRC="target/${{ matrix.target }}/release/${BIN}"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ARCHIVE="${PROJECT_NAME}-${{ matrix.name }}.zip"
            cp "${BINARY_SRC}" "${BIN}"
            7z a "dist/${ARCHIVE}" "${BIN}"
          else
            ARCHIVE="${PROJECT_NAME}-${{ matrix.name }}.tar.gz"
            cp "${BINARY_SRC}" "${BIN}"
            tar -czf "dist/${ARCHIVE}" "${BIN}"
          fi
          cd dist
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            certutil -hashfile "${ARCHIVE}" SHA256 \
              | sed -E '1,2d' > "${ARCHIVE}.sha256"
          else
            sha256sum "${ARCHIVE}" \
              | cut -d ' ' -f1 > "${ARCHIVE}.sha256"
          fi
        shell: bash

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.name }}
          path: dist/
          if-no-files-found: error

  collect:
    name: Collect binaries
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Organize artifacts
        run: |
          mkdir -p dist
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} dist/ \;
          find artifacts -type f -name "*.sha256" -exec cp {} dist/ \;
          cd dist
          echo "# SHA256 Checksums" > SHA256SUMS
          for sha in *.sha256; do
            fn="${sha%.*}"
            hs=$(<"$sha")
            echo "$hs  $fn" >> SHA256SUMS
          done
          sha256sum SHA256SUMS > SHA256SUMS.sha256

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v3
        with:
          name: all-binaries
          path: dist/
          if-no-files-found: error
