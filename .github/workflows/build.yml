name: Build Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            name: linux-armv7
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            ext: .exe
          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            python3
        shell: bash

      - name: Build & cache with cross
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.target }}
          args: "--locked --release"
          strip: true

      # 3. 修正 sed 提取项目名，支持缩进
      - name: Get project info
        id: project_info
        run: |
          PROJECT_NAME=$(sed -n 's/^\s*name\s*=\s*"\(.*\)"/\1/p' Cargo.toml)
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "Project name: $PROJECT_NAME"
        shell: bash

      - name: Package binary
        run: |
          mkdir -p dist
          BINARY_PATH="target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}${{ matrix.ext }}"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ARCHIVE_NAME="${{ env.PROJECT_NAME }}-${{ matrix.name }}.zip"
            cp "$BINARY_PATH" "${{ env.PROJECT_NAME }}${{ matrix.ext }}"
            7z a "dist/$ARCHIVE_NAME" "${{ env.PROJECT_NAME }}${{ matrix.ext }}"
          else
            ARCHIVE_NAME="${{ env.PROJECT_NAME }}-${{ matrix.name }}.tar.gz"
            cp "$BINARY_PATH" "${{ env.PROJECT_NAME }}${{ matrix.ext }}"
            tar -czf "dist/$ARCHIVE_NAME" "${{ env.PROJECT_NAME }}${{ matrix.ext }}"
          fi
          cd dist
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            certutil -hashfile "$ARCHIVE_NAME" SHA256 \
              | sed -E '1,2d' \
              > "${ARCHIVE_NAME}.sha256"
          else
            sha256sum "$ARCHIVE_NAME" \
              | cut -d ' ' -f 1 \
              > "${ARCHIVE_NAME}.sha256"
          fi
        shell: bash

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.name }}
          path: dist/
          if-no-files-found: error

  collect:
    name: Collect binaries
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Organize artifacts
        run: |
          mkdir -p dist
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} dist/ \;
          find artifacts -type f -name "*.sha256" -exec cp {} dist/ \;
          cd dist
          echo "# SHA256 Checksums" > SHA256SUMS
          for sha in *.sha256; do
            fname="${sha%.*}"
            shasum=$(<"$sha")
            echo "$shasum  $fname" >> SHA256SUMS
          done
          sha256sum SHA256SUMS > SHA256SUMS.sha256

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v3
        with:
          name: all-binaries
          path: dist/
          if-no-files-found: error
