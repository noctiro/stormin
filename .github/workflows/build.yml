name: Build Binaries

on:
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            name: linux-armv7
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            ext: .exe
          - os: windows-latest
            target: i686-pc-windows-msvc
            name: windows-i686
            ext: .exe
          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
            ext: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
            ext: ""

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            python3
        shell: bash

      - name: Build & cache with cross
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.target }}
          args: "--locked --release"
          strip: true

      - name: Get project info
        id: project_info
        run: |
          PROJECT_NAME=$(grep -m 1 '^name[[:space:]]*=' Cargo.toml | sed -E 's/name[[:space:]]*=[[:space:]]*"([^"]*)"/\1/g')
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "Project name: $PROJECT_NAME"
        shell: bash

      - name: Package binary
        run: |
          mkdir -p dist

          BIN_NAME="${PROJECT_NAME}${{ matrix.ext }}"
          BINARY_SRC="target/${{ matrix.target }}/release/${BIN_NAME}"
          ARCHIVE="${PROJECT_NAME}-${{ matrix.name }}"

          cp "${BINARY_SRC}" "${BIN_NAME}"

          case "$RUNNER_OS" in
            "Windows")
              mv "${BIN_NAME}" "dist/${ARCHIVE}.exe"
              powershell -Command "Get-FileHash 'dist/${ARCHIVE}.exe' -Algorithm SHA256 | ForEach-Object { \$_.Hash } > 'dist/${ARCHIVE}.exe.sha256'"
              ;;
            "macOS")
              tar -czf "dist/${ARCHIVE}.tar.gz" "${BIN_NAME}"
              shasum -a 256 "dist/${ARCHIVE}.tar.gz" | awk '{print $1}' > "dist/${ARCHIVE}.tar.gz.sha256"
              ;;
            *)
              tar -czf "dist/${ARCHIVE}.tar.gz" "${BIN_NAME}"
              sha256sum "dist/${ARCHIVE}.tar.gz" | awk '{print $1}' > "dist/${ARCHIVE}.tar.gz.sha256"
              ;;
          esac

          rm -f "${BIN_NAME}"
        shell: bash

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.name }}
          path: dist/
          if-no-files-found: error

  collect:
    name: Collect binaries
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize artifacts
        run: |
          mkdir -p dist
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" -o -name "*.exe" \) -exec cp {} dist/ \;
          find artifacts -type f -name "*.sha256" -exec cp {} dist/ \;
          cd dist
          echo "# SHA256 Checksums" > SHA256SUMS
          for sha in *.sha256; do
            fn="${sha%.*}"
            hs=$(<"$sha")
            echo "$hs  $fn" >> SHA256SUMS
          done
          sha256sum SHA256SUMS > SHA256SUMS.sha256

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-binaries
          path: dist/
          if-no-files-found: error
