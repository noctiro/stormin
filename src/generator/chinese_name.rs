use rand::RngCore;

// 常见中文姓氏列表
static SURNAMES: &[&str] = &[
    "李", "王", "张", "刘", "陈", "杨", "赵", "黄", "周", "吴", "徐", "孙", "胡", "朱", "高", "林",
    "何", "郭", "马", "罗", "梁", "宋", "郑", "谢", "韩", "唐", "冯", "于", "董", "萧", "程", "曹",
    "袁", "邓", "许", "傅", "沈", "曾", "彭", "吕", "苏", "卢", "蒋", "蔡", "贾", "丁", "魏", "薛",
    "叶", "阎", "余", "潘", "杜", "戴", "夏", "钟", "汪", "田", "任", "姜", "范", "方", "石", "姚",
    "谭", "廖", "邹", "熊", "金", "陆", "郝", "孔", "白", "崔", "康", "毛", "邱", "秦", "江", "史",
    "顾", "侯", "邵", "孟", "龙", "万", "段", "漕", "钱", "汤", "尹", "黎", "易", "常", "武", "乔",
    "贺", "赖", "龚", "文", "庞", "樊", "兰", "殷", "施", "陶", "洪", "翟", "安", "颜", "倪", "严",
    "牛", "温", "芦", "季", "俞", "章", "鲁", "葛", "伍", "韦", "申", "尤", "毕", "聂", "丛", "焦",
    "向", "柳", "苗", "庄", "桂", "乔", "梅", "盛", "林", "蓝", "滕", "蒲", "方", "晏", "习", "廉",
    "练", "裴", "储", "边", "吉", "邬", "卜", "宁", "仇", "栾", "暴", "甘", "厉", "戚", "景", "柴",
    "瞿", "阮", "嵇", "虞", "包", "米", "屈", "查", "祝", "巩", "冉", "桑", "桂", "尚", "寿", "仝",
    "全", "卞", "苟", "印", "井",
];

// 定义常用汉字范围边界（常用字集中的字，避免生成罕见字）
const CHAR_START: u32 = 0x4E00; // CJK统一汉字起始点
const CHAR_END: u32 = 0x9FA5; // 常用汉字终止点 (更窄的范围)
const CHAR_RANGE: u32 = CHAR_END - CHAR_START + 1;

pub fn generate_chinese_name<T: RngCore>(rng: &mut T) -> String {
    // 提前计算好容量以避免重新分配
    let mut name = String::with_capacity(12); // 足够存储UTF-8编码的3-4个汉字

    // 随机选择姓氏 - 直接使用取模，避免额外计算
    let surname_index = (rng.next_u32() as usize) % SURNAMES.len();
    name.push_str(SURNAMES[surname_index]);

    // 决定名字长度：1或2个字（70%概率是2个字）- 使用位操作更快
    let name_length = if rng.next_u32() & 0b1111 < 11 { 2 } else { 1 };

    // 高效生成名字字符
    for _ in 0..name_length {
        // 快速生成随机码点 - 使用位操作代替模运算
        let code_point = CHAR_START + (rng.next_u32() % CHAR_RANGE);

        // 直接将码点转换为字符并添加到名字中 - 无条件包装
        if let Some(ch) = char::from_u32(code_point) {
            name.push(ch);
        }
    }

    name
}
