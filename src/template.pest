// template.pest

// Template = sequence of static text or expressions until End Of Input
template = { SOI ~ (expression | static_text)* ~ EOI }

// Expression = ${ identifier [: arguments ] }
// Allows ${fn}, ${fn:}, ${fn:arg1,...}
expression = { "${" ~ identifier ~ arguments? ~ "}" }

// Arguments = : [ arg1 [, arg2, ...] ] (optional list after colon)
// Allows the colon alone for zero arguments.
arguments = { ":" ~ argument ~ ("," ~ argument)* }

// Argument = Can be a nested expression, template string, string literal, number, or identifier (keyword)
argument = { template_string
          | string_literal
          | number
          | expression 
          | identifier }

// Backtick Template String - essential to make the closing backtick part of the rule
template_string = ${ "`" ~ template_string_content* ~ "`" }

// Content inside a template string can be expressions or literal text
template_string_content = _{ expression | template_string_literal }

// Literal text within a template string - any sequence not starting with ${ and not a backtick
template_string_literal = { (!("${" | "`") ~ ANY)+ }

// String Literal = " ... " (atomic)
string_literal = @{ "\"" ~ string_inner* ~ "\"" }
string_inner = _{ escape_sequence | !("\"" | "\\") ~ ANY }
escape_sequence = _{ "\\" ~ ("\"" | "\\") }

// Number Literal = sequence of digits (atomic)
number = @{ ASCII_DIGIT+ }

// Identifier = Function name or keyword (atomic)
identifier = @{ (ASCII_ALPHANUMERIC | "_")+ }

// Static Text = Any sequence of characters not starting an expression
static_text = { (!"${" ~ ANY)+ }

// Define silent whitespace (ignored between tokens where allowed by grammar structure)
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }