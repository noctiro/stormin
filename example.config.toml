# 全局配置
# 线程数，默认为 CPU 核心数 * 16
# threads = 64
# 生成线程数，一般1就够用
# generator_threads = 1
# 代理路径 (如果不存在或为空，则不使用代理)
# proxy = "proxy.txt"
# 超时时间，单位秒
# timeout = 5

# 示例 1: 基本 GET 请求，使用随机用户名和密码
[[Target]]
url = "https://example.com/login"
method = "GET"
params = { user = "${username}", pass = "${password}" }

# 示例 2: POST 请求，使用随机用户名和密码 + 上下文处理
[[Target]]
url = "https://example.com/register"
method = "POST"
params = { name = "${username}", password = "${password}" }

# 示例 3: 使用随机 QQ 号和替换用户名中的 '@' 为 '_'
[[Target]]
url = "https://example.com/update_profile"
method = "PUT"
params = { sanitized_user = "${replace:${username},\"@\",\"_\"}", qqid = "${qqid}" }

# 示例 4: 自定义请求头 + 随机字符串（16位）生成
[[Target]]
url = "https://example.com/api/resource"
method = "GET"
headers = { "X-Custom-Header" = "SomeValue", "Authorization" = "Bearer ${random:chars,16}" }

# 示例 5: 字符串字面量 Base64 编码 + 随机数生成
[[Target]]
url = "https://example.com/submit_data"
method = "POST"
params = { data = "${base64:\"Hello World!\"}", num = "${random:number,100,999}" }

# 示例 6: 混合字符串转换（upper、substr）和 Base64 编码
[[Target]]
url = "https://example.com/case_test"
method = "POST"
params = { upper_user = "${upper:${username}}", pass_prefix = "${substr:${password},0,8}", encoded_email = "${base64:${replace:${email},\"@\",\"_\"}}" }

# 示例 7: 反引号模板字符串，先拼接再进行编码
[[Target]]
url = "https://example.com/backtick_demo"
method = "POST"
params = { info = "${base64:`User=${username};ID=${qqid}`}" }

# 示例 8: URL 路径中使用随机数，Header 使用随机字符串
[[Target]]
url = "https://example.com/api/users/${random:number,1,100}/profile"
method = "GET"
headers = { "User-Agent" = "MyClient/${random:chars,5}" }
